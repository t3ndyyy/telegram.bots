import logging
import re
import asyncio
import aiosqlite
from phonenumbers import parse, is_valid_number, NumberParseException
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
API_TOKEN = 'YOUR_BOT_API_TOKEN'
ADMIN_USER_IDS = ['YOUR_ADMIN_ID_1', 'YOUR_ADMIN_ID_2']  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ ID

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    conn = await aiosqlite.connect('university_contacts.db')
    cursor = await conn.cursor()
    await cursor.execute('''
    CREATE TABLE IF NOT EXISTS groups (
        group_id INTEGER PRIMARY KEY AUTOINCREMENT,
        group_name TEXT UNIQUE
    )
    ''')
    await cursor.execute('''
    CREATE TABLE IF NOT EXISTS contacts (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        phone_number TEXT,
        telegram TEXT,
        vk TEXT,
        group_id INTEGER,
        FOREIGN KEY (group_id) REFERENCES groups (group_id)
    )
    ''')
    await conn.commit()
    return conn

conn = asyncio.run(init_db())

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class Registration(StatesGroup):
    choosing_group = State()
    entering_name = State()
    entering_phone = State()
    entering_telegram = State()
    entering_vk = State()

# –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã
def is_valid_phone_number(phone_number):
    try:
        parsed_number = parse(phone_number, None)
        return is_valid_number(parsed_number)
    except NumberParseException:
        return False

def is_valid_telegram_username(username):
    return bool(re.match(r'^@[a-zA-Z0-9_]{5,32}$', username))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def send_welcome(message: Message):
    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)],
        [KeyboardButton(text="üìù –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")]
    ], resize_keyboard=True)
    
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@dp.message(lambda message: message.contact is not None)
async def handle_contact(message: Message, state: FSMContext):
    phone_number = message.contact.phone_number
    if is_valid_phone_number(phone_number):
        await state.update_data(phone_number=phone_number)
        await state.set_state(Registration.choosing_group)
        await message.answer("‚úÖ –ù–æ–º–µ—Ä –ø—Ä–∏–Ω—è—Ç! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É:")
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π /register –¥–ª—è —Ä—É—á–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

@dp.message(Command("register"))
async def start_registration(message: Message, state: FSMContext):
    await state.set_state(Registration.choosing_group)
    await message.answer("üìö –í—ã–±–µ—Ä–∏ —Å–≤–æ—é —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É:")

@dp.message(Registration.choosing_group)
async def choose_group(message: Message, state: FSMContext):
    group_name = message.text.strip()
    async with conn.cursor() as cursor:
        await cursor.execute('SELECT group_id FROM groups WHERE group_name = ?', (group_name,))
        group = await cursor.fetchone()
    
    if group:
        await state.update_data(group_id=group[0])
        await state.set_state(Registration.entering_name)
        await message.answer("üë§ –í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤):")
    else:
        await message.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

@dp.message(Registration.entering_name)
async def enter_name(message: Message, state: FSMContext):
    full_name = message.text.strip().split(maxsplit=1)
    if len(full_name) == 2:
        first_name, last_name = full_name
        await state.update_data(first_name=first_name, last_name=last_name)
        await state.set_state(Registration.entering_phone)
        
        data = await state.get_data()
        if 'phone_number' not in data:
            await message.answer("üì± –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        else:
            await state.set_state(Registration.entering_telegram)
            await message.answer("üí¨ –í–≤–µ–¥–∏ —Å–≤–æ–π Telegram (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username):")
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")

@dp.message(Registration.entering_phone)
async def enter_phone(message: Message, state: FSMContext):
    phone_number = message.text.strip()
    if is_valid_phone_number(phone_number):
        await state.update_data(phone_number=phone_number)
        await state.set_state(Registration.entering_telegram)
        await message.answer("üí¨ –í–≤–µ–¥–∏ —Å–≤–æ–π Telegram (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username):")
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü—Ä–∏–º–µ—Ä: +79161234567")

@dp.message(Registration.entering_telegram)
async def enter_telegram(message: Message, state: FSMContext):
    telegram = message.text.strip()
    if is_valid_telegram_username(telegram):
        await state.update_data(telegram=telegram)
        await state.set_state(Registration.entering_vk)
        await message.answer("üîó –í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –í–ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, vk.com/id12345):")
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram. –ò—Å–ø–æ–ª—å–∑—É–π @username.")

@dp.message(Registration.entering_vk)
async def enter_vk(message: Message, state: FSMContext):
    vk = message.text.strip()
    user_data = await state.get_data()
    user_id = message.from_user.id
    username = message.from_user.username
    try:
        async with conn.cursor() as cursor:
            await cursor.execute('''
            INSERT OR REPLACE INTO contacts 
            (user_id, username, first_name, last_name, phone_number, telegram, vk, group_id)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                user_id,
                username,
                user_data['first_name'],
                user_data['last_name'],
                user_data['phone_number'],
                user_data['telegram'],
                vk,
                user_data['group_id']
            ))
            await conn.commit()
        await message.answer("üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–ò—Å–ø–æ–ª—å–∑—É–π /profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.error(f"Error saving user data: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
    
    await state.clear()

@dp.message(Command("profile"))
async def view_profile(message: Message):
    user_id = message.from_user.id
    async with conn.cursor() as cursor:
        await cursor.execute('''
        SELECT first_name, last_name, phone_number, telegram, vk, group_name
        FROM contacts
        JOIN groups ON contacts.group_id = groups.group_id
        WHERE user_id = ?
        ''', (user_id,))
        result = await cursor.fetchone()
    
    if result:
        response = (
            f"üë§ –ò–º—è: {result[0]} {result[1]}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {result[2]}\n"
            f"üí¨ Telegram: {result[3]}\n"
            f"üîó VK: {result[4]}\n"
            f"üìö –ì—Ä—É–ø–ø–∞: {result[5]}"
        )
        await message.answer(response)
    else:
        await message.answer("‚ùå –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /register")

@dp.message(Command("delete"))
async def delete_profile(message: Message):
    user_id = message.from_user.id
    async with conn.cursor() as cursor:
        await cursor.execute('DELETE FROM contacts WHERE user_id = ?', (user_id,))
        await conn.commit()
    await message.answer("‚ùå –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω")

# –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
@dp.message(Command("add_group"))
async def add_group(message: Message):
    if str(message.from_user.id) in ADMIN_USER_IDS:
        try:
            group_name = message.text.split(maxsplit=1)[1].strip()
            async with conn.cursor() as cursor:
                await cursor.execute('INSERT INTO groups (group_name) VALUES (?)', (group_name,))
                await conn.commit()
            await message.answer(f"‚úÖ –ì—Ä—É–ø–ø–∞ '{group_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        except (IndexError, aiosqlite.IntegrityError) as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")

@dp.message(Command("groups"))
async def show_groups(message: Message):
    async with conn.cursor() as cursor:
        await cursor.execute('SELECT group_name FROM groups')
        groups = await cursor.fetchall()
    if groups:
        response = "üìö –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø:\n" + "\n".join([f"- {group[0]}" for group in groups])
        await message.answer(response)
    else:
        await message.answer("‚ùå –ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

@dp.message(Command("group_info"))
async def group_info(message: Message):
    if str(message.from_user.id) in ADMIN_USER_IDS:
        try:
            group_name = message.text.split(maxsplit=1)[1].strip()
            async with conn.cursor() as cursor:
                await cursor.execute('''
                SELECT first_name, last_name, phone_number 
                FROM contacts 
                JOIN groups ON contacts.group_id = groups.group_id 
                WHERE group_name = ?
                ''', (group_name,))
                members = await cursor.fetchall()
            if members:
                response = f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã {group_name}:\n"
                response += "\n".join([f"- {m[0]} {m[1]}: {m[2]}" for m in members])
                await message.answer(response)
            else:
                await message.answer(f"‚ùå –í –≥—Ä—É–ø–ø–µ '{group_name}' –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        except IndexError:
            await message.answer("‚ùå –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã")
    else:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")

@dp.message(Command("help"))
async def help_command(message: Message):
    help_text = (
        "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "/profile - –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è\n"
        "/delete - –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è\n\n"
        "–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n"
        "/add_group - –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É\n"
        "/groups - –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø\n"
        "/group_info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ"
    )
    await message.answer(help_text)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
