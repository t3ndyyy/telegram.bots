import logging
import re
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
import os
import phonenumbers

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = ''
ADMIN_USER_ID = ''

if not API_TOKEN or not ADMIN_USER_ID:
    raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω—ã —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–ª–∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('university_contacts.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
cursor.execute('''
CREATE TABLE IF NOT EXISTS groups (
    group_id INTEGER PRIMARY KEY AUTOINCREMENT,
    group_name TEXT UNIQUE
)
''')
cursor.execute('''
CREATE TABLE IF NOT EXISTS contacts (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    first_name TEXT,
    last_name TEXT,
    phone_number TEXT,
    telegram TEXT,
    vk TEXT,
    group_id INTEGER,
    FOREIGN KEY (group_id) REFERENCES groups (group_id)
)
''')
conn.commit()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Registration(StatesGroup):
    choosing_group = State()
    entering_name = State()
    entering_phone = State()
    entering_telegram = State()
    entering_vk = State()

# –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º phonenumbers
def is_valid_phone_number(phone_number):
    try:
        parsed_number = phonenumbers.parse(phone_number, None)
        return phonenumbers.is_valid_number(parsed_number)
    except phonenumbers.phonenumberutil.NumberParseException:
        return False

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu_keyboard():
    return types.ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [types.KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)],
        [types.KeyboardButton(text="üìù –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")],
        [types.KeyboardButton(text="üí∏ –ü–æ–º–æ—â—å –∞–≤—Ç–æ—Ä–∞–º")],
        [types.KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
        [types.KeyboardButton(text="üìö –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø")],
        [types.KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")],
        [types.KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
@dp.message_handler(content_types=types.ContentType.CONTACT)
async def handle_contact(message: types.Message, state: FSMContext):
    phone_number = message.contact.phone_number
    if is_valid_phone_number(phone_number):
        await state.update_data(phone_number=phone_number)
        await state.set_state(Registration.choosing_group)
        await message.answer(
            "‚úÖ –ù–æ–º–µ—Ä –ø—Ä–∏–Ω—è—Ç! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É:",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π /register –¥–ª—è —Ä—É—á–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=get_main_menu_keyboard()
        )

# –ö–æ–º–∞–Ω–¥–∞ /register
@dp.message_handler(commands=['register'])
async def start_registration(message: types.Message, state: FSMContext):
    await state.set_state(Registration.choosing_group)
    await message.answer(
        "üìö –í—ã–±–µ—Ä–∏ —Å–≤–æ—é —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É:",
        reply_markup=get_main_menu_keyboard()
    )

# –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
@dp.message_handler(state=Registration.choosing_group)
async def choose_group(message: types.Message, state: FSMContext):
    group_name = message.text.strip()
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≥—Ä—É–ø–ø—É: {group_name}")
    cursor.execute('SELECT group_id FROM groups WHERE LOWER(group_name) = ?', (group_name.lower(),))
    group = cursor.fetchone()
    if group:
        logging.info(f"–ì—Ä—É–ø–ø–∞ –Ω–∞–π–¥–µ–Ω–∞: {group}")
        await state.update_data(group_id=group[0])
        await state.set_state(Registration.entering_name)
        await message.answer(
            "üë§ –í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤):",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        logging.info(f"–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {group_name}")
        # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø
        cursor.execute('SELECT group_name FROM groups')
        groups = cursor.fetchall()
        if groups:
            group_list = "\n".join([f"- {g[0]}" for g in groups])
            await message.answer(
                f"‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã:\n{group_list}",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await message.answer(
                "‚ùå –ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=get_main_menu_keyboard()
            )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üë§ –ü—Ä–æ—Ñ–∏–ª—å"
@dp.message_handler(Text(equals="üë§ –ü—Ä–æ—Ñ–∏–ª—å"))
async def profile_button(message: types.Message):
    await view_profile(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìö –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø"
@dp.message_handler(Text(equals="üìö –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø"))
async def groups_button(message: types.Message):
    await show_groups(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"
@dp.message_handler(Text(equals="‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"))
async def delete_button(message: types.Message):
    await delete_profile(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.message_handler(Text(equals="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
async def main_menu(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üí∏ –ü–æ–º–æ—â—å –∞–≤—Ç–æ—Ä–∞–º"
@dp.message_handler(Text(equals="üí∏ –ü–æ–º–æ—â—å –∞–≤—Ç–æ—Ä–∞–º"))
async def help_authors(message: types.Message):
    yoomoney_link = "https://yoomoney.ru/to/4100118763269949"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Å—Å—ã–ª–∫—É –Ω–∞ –ÆMoney
    await message.answer(
        f"üíñ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å –∞–≤—Ç–æ—Ä–∞–º, –ø–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ: {yoomoney_link}",
        reply_markup=get_main_menu_keyboard()
    )

# –ö–æ–º–∞–Ω–¥–∞ /profile
@dp.message_handler(commands=['profile'])
async def view_profile(message: types.Message):
    user_id = message.from_user.id
    cursor.execute('''
    SELECT first_name, last_name, phone_number, telegram, vk, group_name
    FROM contacts
    JOIN groups ON contacts.group_id = groups.group_id
    WHERE user_id = ?
    ''', (user_id,))
    result = cursor.fetchone()
    if result:
        response = (
            f"üë§ –ò–º—è: {result[0]} {result[1]}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {result[2]}\n"
            f"üí¨ Telegram: {result[3]}\n"
            f"üîó VK: {result[4]}\n"
            f"üìö –ì—Ä—É–ø–ø–∞: {result[5]}"
        )
        await message.answer(response, reply_markup=get_main_menu_keyboard())
    else:
        await message.answer(
            "‚ùå –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /register",
            reply_markup=get_main_menu_keyboard()
        )

# –ö–æ–º–∞–Ω–¥–∞ /delete
@dp.message_handler(commands=['delete'])
async def delete_profile(message: types.Message):
    user_id = message.from_user.id
    cursor.execute('DELETE FROM contacts WHERE user_id = ?', (user_id,))
    conn.commit()
    await message.answer(
        "‚ùå –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω",
        reply_markup=get_main_menu_keyboard()
    )

# –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞ /add_group
@dp.message_handler(commands=['add_group'])
async def add_group(message: types.Message):
    if str(message.from_user.id) == str(ADMIN_USER_ID):
        try:
            group_name = message.text.split(maxsplit=1)[1].strip()
            if not group_name:
                raise ValueError("–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
            cursor.execute('INSERT INTO groups (group_name) VALUES (?)', (group_name,))
            conn.commit()
            await message.answer(
                f"‚úÖ –ì—Ä—É–ø–ø–∞ '{group_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞",
                reply_markup=get_main_menu_keyboard()
            )
        except IndexError:
            await message.answer(
                "‚ùå –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã",
                reply_markup=get_main_menu_keyboard()
            )
        except sqlite3.IntegrityError:
            await message.answer(
                "‚ùå –ì—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                reply_markup=get_main_menu_keyboard()
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã",
                reply_markup=get_main_menu_keyboard()
            )
    else:
        await message.answer(
            "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É",
            reply_markup=get_main_menu_keyboard()
        )

# –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞ /groups
@dp.message_handler(commands=['groups'])
async def show_groups(message: types.Message):
    cursor.execute('SELECT group_name FROM groups')
    groups = cursor.fetchall()
    if groups:
        response = "üìö –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø:\n" + "\n".join([f"- {g[0]}" for g in groups])
        await message.answer(
            response,
            reply_markup=get_main_menu_keyboard()
        )
    else:
        await message.answer(
            "‚ùå –ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=get_main_menu_keyboard()
        )

# –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞ /group_info
@dp.message_handler(commands=['group_info'])
async def group_info(message: types.Message):
    if str(message.from_user.id) == str(ADMIN_USER_ID):
        try:
            group_name = message.text.split(maxsplit=1)[1].strip()
            cursor.execute('''
            SELECT first_name, last_name, phone_number 
            FROM contacts 
            JOIN groups ON contacts.group_id = groups.group_id 
            WHERE group_name = ?
            ''', (group_name,))
            members = cursor.fetchall()
            if members:
                response = f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã {group_name}:\n"
                response += "\n".join([f"- {m[0]} {m[1]}: {m[2]}" for m in members])
                await message.answer(
                    response,
                    reply_markup=get_main_menu_keyboard()
                )
            else:
                await message.answer(
                    f"‚ùå –í –≥—Ä—É–ø–ø–µ '{group_name}' –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                    reply_markup=get_main_menu_keyboard()
                )
        except IndexError:
            await message.answer(
                "‚ùå –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã",
                reply_markup=get_main_menu_keyboard()
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ",
                reply_markup=get_main_menu_keyboard()
            )
    else:
        await message.answer(
            "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É",
            reply_markup=get_main_menu_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    help_text = (
        "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "/profile - –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è\n"
        "/delete - –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è\n"
        "üí∏ –ü–æ–º–æ—â—å –∞–≤—Ç–æ—Ä–∞–º - –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–æ–≤\n\n"
        "–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n"
        "/add_group - –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É\n"
        "/groups - –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø\n"
        "/group_info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ"
    )
    await message.answer(help_text, reply_markup=get_main_menu_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@dp.errors_handler()
async def errors_handler(update: types.Update, exception: Exception):
    logging.error(f"Update {update} –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É: {exception}", exc_info=True)
    await update.message.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.",
        reply_markup=get_main_menu_keyboard()
    )
    return True

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
if __name__ == "__main__":
    from aiogram.utils.executor import start_polling

    async def on_shutdown(dp):
        conn.close()  # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

    start_polling(dp, skip_updates=True, on_shutdown=on_shutdown)
