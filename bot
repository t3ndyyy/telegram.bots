import os
import logging
import sqlite3
import re
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from contextlib import contextmanager
from dotenv import load_dotenv

load_dotenv()
logging.basicConfig(level=logging.INFO)

bot = Bot(token="7799348568:AAEFkoTyYPDxhR1rSzlposQMkr5PbjJEL7U")
dp = Dispatcher()

class DatabaseManager:
    def __init__(self, db_path='students.db'):
        self.db_path = db_path
        self._initialize_database()

    @contextmanager
    def _get_cursor(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        try:
            yield cursor
        finally:
            conn.commit()
            conn.close()

    def _initialize_database(self):
        with self._get_cursor() as cursor:
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS groups (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL UNIQUE,
                    course INTEGER NOT NULL
                )
            ''')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS students (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL,
                    telegram_profile TEXT,
                    phone_number TEXT,
                    group_id INTEGER,
                    FOREIGN KEY (group_id) REFERENCES groups(id)
                )
            ''')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS contacts (
                    user_id INTEGER PRIMARY KEY,
                    phone_number TEXT NOT NULL
                )
            ''')

    def add_group(self, name, course):
        try:
            with self._get_cursor() as cursor:
                cursor.execute('INSERT INTO groups (name, course) VALUES (?, ?)', (name, course))
                logging.info(f"Group '{name}' added successfully.")
                return True, f"‚úÖ –ì—Ä—É–ø–ø–∞ '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∫—É—Ä—Å {course}!"
        except sqlite3.IntegrityError:
            logging.warning(f"Group '{name}' already exists.")
            return False, f"üö´ –ì—Ä—É–ø–ø–∞ '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
        except Exception as e:
            logging.error(f"Error adding group '{name}': {e}")
            return False, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã '{name}': {e}"

    def group_exists(self, name, course):
        with self._get_cursor() as cursor:
            cursor.execute('SELECT * FROM groups WHERE name=? AND course=?', (name, course))
            return cursor.fetchone() is not None

    def get_all_groups(self):
        with self._get_cursor() as cursor:
            cursor.execute('SELECT * FROM groups')
            return cursor.fetchall()

    def get_groups_by_course(self, course):
        with self._get_cursor() as cursor:
            cursor.execute('SELECT * FROM groups WHERE course=?', (course,))
            return cursor.fetchall()

    def delete_group(self, group_id):
        with self._get_cursor() as cursor:
            cursor.execute('DELETE FROM groups WHERE id=?', (group_id,))

    def add_student(self, name, telegram_profile=None, phone_number=None, group_id=None):
        with self._get_cursor() as cursor:
            cursor.execute('''
                INSERT INTO students (name, telegram_profile, phone_number, group_id)
                VALUES (?, ?, ?, ?)
            ''', (name, telegram_profile, phone_number, group_id))

    def student_exists(self, name, telegram_profile):
        with self._get_cursor() as cursor:
            cursor.execute('SELECT * FROM students WHERE name=? OR telegram_profile=?', (name, telegram_profile))
            return cursor.fetchone() is not None

    def get_all_students(self):
        with self._get_cursor() as cursor:
            cursor.execute('SELECT * FROM students')
            return cursor.fetchall()

    def get_students_by_group(self, group_id):
        with self._get_cursor() as cursor:
            cursor.execute('SELECT * FROM students WHERE group_id=?', (group_id,))
            return cursor.fetchall()

    def delete_student(self, student_id):
        with self._get_cursor() as cursor:
            cursor.execute('DELETE FROM students WHERE id=?', (student_id,))

    def delete_student_by_telegram(self, telegram_profile):
        with self._get_cursor() as cursor:
            cursor.execute('DELETE FROM students WHERE telegram_profile=?', (telegram_profile,))

    def has_contact(self, user_id):
        with self._get_cursor() as cursor:
            cursor.execute('SELECT * FROM contacts WHERE user_id=?', (user_id,))
            return cursor.fetchone() is not None

    def save_contact(self, user_id, phone_number):
        with self._get_cursor() as cursor:
            cursor.execute('INSERT OR IGNORE INTO contacts (user_id, phone_number) VALUES (?, ?)', (user_id, phone_number))

    def get_contact(self, user_id):
        with self._get_cursor() as cursor:
            cursor.execute('SELECT phone_number FROM contacts WHERE user_id=?', (user_id,))
            result = cursor.fetchone()
            return result[0] if result else None

    def get_student_group(self, telegram_profile):
        with self._get_cursor() as cursor:
            cursor.execute('''
                SELECT g.name, g.course 
                FROM students s 
                JOIN groups g ON s.group_id = g.id 
                WHERE s.telegram_profile = ?
            ''', (telegram_profile,))
            result = cursor.fetchone()
            return result if result else None

db = DatabaseManager()

class Form(StatesGroup):
    waiting_for_group_name = State()
    waiting_for_group_course = State()
    waiting_for_group_selection = State()
    waiting_for_group = State()
    waiting_for_name = State()

class AdminPanel(StatesGroup):
    managing_users = State()
    managing_groups = State()
    selecting_course_for_users = State()
    selecting_group_for_users = State()

class ViewStudents(StatesGroup):
    selecting_course = State()
    selecting_group = State()

def main_menu_keyboard(registered=False):
    if registered:
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –≥—Ä—É–ø–ø—É")],
                [KeyboardButton(text="üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—â–∏—Ö—Å—è")],
                [KeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É")],
                [KeyboardButton(text="üí∏ –î–æ–Ω–∞—Ç"), KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å")]
            ],
            resize_keyboard=True
        )
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –≥—Ä—É–ø–ø—É")],
            [KeyboardButton(text="üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—â–∏—Ö—Å—è")],
            [KeyboardButton(text="üí∏ –î–æ–Ω–∞—Ç"), KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å")]
        ],
        resize_keyboard=True
    )

def admin_panel_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")],
            [KeyboardButton(text="üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏")],
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

def course_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="1 –∫—É—Ä—Å")],
            [KeyboardButton(text="2 –∫—É—Ä—Å")],
            [KeyboardButton(text="3 –∫—É—Ä—Å")],
            [KeyboardButton(text="4 –∫—É—Ä—Å")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥"), KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

def validate_and_format_phone_number(phone_number: str) -> str | None:
    cleaned_number = re.sub(r"[^0-9]", "", phone_number)
    if len(cleaned_number) == 11:
        if cleaned_number.startswith("8"):
            return "+7" + cleaned_number[1:]
        elif cleaned_number.startswith("7"):
            return "+" + cleaned_number
    elif len(cleaned_number) == 10:
        return "+7" + cleaned_number
    return None

@dp.message(Command("start"))
async def start(message: types.Message):
    if not db.has_contact(message.from_user.id):
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]],
            resize_keyboard=True
        )
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç.", reply_markup=keyboard)
    else:
        telegram_profile = f"@{message.from_user.username}" if message.from_user.username else None
        group_info = db.get_student_group(telegram_profile)
        if group_info:
            group_name, course = group_info
            welcome_message = f"üëã –ü—Ä–∏–≤–µ—Ç! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –≥—Ä—É–ø–ø–µ '{group_name}' (–ö—É—Ä—Å {course}).\n–≠—Ç–æ –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É."
            keyboard = main_menu_keyboard(registered=True)
        else:
            welcome_message = "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ.\n–≠—Ç–æ –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É."
            keyboard = main_menu_keyboard(registered=False)
        await message.answer(welcome_message, reply_markup=keyboard)

@dp.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def return_to_main_menu(message: types.Message, state: FSMContext):
    await state.clear()
    telegram_profile = f"@{message.from_user.username}" if message.from_user.username else None
    group_info = db.get_student_group(telegram_profile)
    if group_info:
        group_name, course = group_info
        response = f"üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –≥—Ä—É–ø–ø–µ '{group_name}' (–ö—É—Ä—Å {course})."
        keyboard = main_menu_keyboard(registered=True)
    else:
        response = "üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ."
        keyboard = main_menu_keyboard(registered=False)
    await message.answer(response, reply_markup=keyboard)

@dp.message(F.contact)
async def process_contact(message: types.Message):
    if message.contact and message.contact.phone_number:
        db.save_contact(message.from_user.id, message.contact.phone_number)
        telegram_profile = f"@{message.from_user.username}" if message.from_user.username else None
        group_info = db.get_student_group(telegram_profile)
        keyboard = main_menu_keyboard(registered=bool(group_info))
        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç!", reply_markup=keyboard)

ADMIN_ID = 6072376664

@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", reply_markup=main_menu_keyboard())
        return
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=admin_panel_keyboard())

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É")
async def add_group_start(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", reply_markup=main_menu_keyboard())
        return
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        resize_keyboard=True
    ))
    await state.set_state(Form.waiting_for_group_name)

@dp.message(Form.waiting_for_group_name)
async def process_group_name(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer("üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())
        return
    group_name = message.text.strip()
    if not group_name or len(group_name) > 50:
        await message.answer("üö´ –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ –¥–ª–∏–Ω–Ω–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    await state.update_data({"group_name": group_name})
    await message.answer("üìö –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞ (1-4):", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥"), KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        resize_keyboard=True
    ))
    await state.set_state(Form.waiting_for_group_course)

@dp.message(Form.waiting_for_group_course)
async def process_group_course(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer("üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())
        return
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã:", reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
            resize_keyboard=True
        ))
        await state.set_state(Form.waiting_for_group_name)
        return
    try:
        course = int(message.text)
        if course < 1 or course > 4:
            raise ValueError
    except ValueError:
        await message.answer("üö´ –ù–æ–º–µ—Ä –∫—É—Ä—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 4.")
        return
    data = await state.get_data()
    group_name = data.get("group_name")
    if db.group_exists(group_name, course):
        await message.answer(f"üö´ –ì—Ä—É–ø–ø–∞ '{group_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ –∫—É—Ä—Å–µ {course}.", reply_markup=main_menu_keyboard())
    else:
        success, message_text = db.add_group(group_name, course)
        await message.answer(message_text, reply_markup=admin_panel_keyboard())
    await state.clear()

@dp.message(F.text == "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏")
async def manage_groups(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", reply_markup=main_menu_keyboard())
        return
    groups = db.get_all_groups()
    if not groups:
        await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç.", reply_markup=admin_panel_keyboard())
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for group in groups:
        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text=f"‚ùå –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É: {group[1]} (–ö—É—Ä—Å {group[2]})", callback_data=f"confirm_delete_group_{group[0]}")]
        )
    await message.answer("üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø:", reply_markup=keyboard)

@dp.message(F.text == "üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
async def manage_users(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", reply_markup=main_menu_keyboard())
        return
    await message.answer("üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:", reply_markup=course_keyboard())
    await state.set_state(AdminPanel.selecting_course_for_users)

@dp.message(AdminPanel.selecting_course_for_users)
async def process_course_selection_for_users(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer("üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())
        return
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=admin_panel_keyboard())
        await state.clear()
        return
    try:
        course = int(message.text.split()[0])
    except (ValueError, IndexError):
        await message.answer("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∫—É—Ä—Å–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return
    groups = db.get_groups_by_course(course)
    if not groups:
        await message.answer(f"üö´ –ù–∞ –∫—É—Ä—Å–µ {course} –ø–æ–∫–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø.", reply_markup=admin_panel_keyboard())
        await state.clear()
        return
    await state.update_data({"course": course})
    group_buttons = [[KeyboardButton(text=f"üìö –ì—Ä—É–ø–ø–∞ {group[1]}")] for group in groups]
    group_buttons.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥"), KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    group_keyboard = ReplyKeyboardMarkup(keyboard=group_buttons, resize_keyboard=True)
    await message.answer(f"üìö –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –Ω–∞ –∫—É—Ä—Å–µ {course}:", reply_markup=group_keyboard)
    await state.set_state(AdminPanel.selecting_group_for_users)

@dp.message(AdminPanel.selecting_group_for_users)
async def process_group_selection_for_users(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer("üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())
        return
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await message.answer("üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:", reply_markup=course_keyboard())
        await state.set_state(AdminPanel.selecting_course_for_users)
        return
    if not message.text.startswith("üìö –ì—Ä—É–ø–ø–∞ "):
        await message.answer("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã. –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return
    selected_group = message.text.replace("üìö –ì—Ä—É–ø–ø–∞ ", "").strip()
    data = await state.get_data()
    course = data.get("course")
    groups = db.get_groups_by_course(course)
    group_id = next((group[0] for group in groups if group[1] == selected_group), None)
    if group_id is None:
        await message.answer("üö´ –ù–µ–≤–µ—Ä–Ω–∞—è –≥—Ä—É–ø–ø–∞. –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return
    students = db.get_students_by_group(group_id)
    if not students:
        await message.answer(f"üì≠ –í –≥—Ä—É–ø–ø–µ '{selected_group}' –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=admin_panel_keyboard())
        await state.clear()
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for student in students:
        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text=f"‚ùå –£–¥–∞–ª–∏—Ç—å: {student[1]}", callback_data=f"confirm_delete_student_{student[0]}")]
        )
    await message.answer(f"üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã '{selected_group}':", reply_markup=keyboard)
    await state.clear()

@dp.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    data = callback.data
    if data.startswith("confirm_delete_group_"):
        group_id = int(data.split("_")[3])
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_group_{group_id}")],
                [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_delete")]
            ]
        )
        await callback.message.edit_text(f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É —Å ID {group_id}?", reply_markup=keyboard)
    elif data.startswith("confirm_delete_student_"):
        student_id = int(data.split("_")[3])
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_student_{student_id}")],
                [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_delete")]
            ]
        )
        await callback.message.edit_text(f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {student_id}?", reply_markup=keyboard)

@dp.callback_query()
async def process_callback(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    data = callback.data
    if data.startswith("delete_group_"):
        group_id = int(data.split("_")[2])
        db.delete_group(group_id)
        await callback.answer(f"‚úÖ –ì—Ä—É–ø–ø–∞ —Å ID {group_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)
        await callback.message.edit_text("‚úÖ –ì—Ä—É–ø–ø–∞ —É–¥–∞–ª–µ–Ω–∞.")
    elif data.startswith("delete_student_"):
        student_id = int(data.split("_")[2])
        db.delete_student(student_id)
        await callback.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {student_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", show_alert=True)
        await callback.message.edit_text("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω.")
    elif data == "cancel_delete":
        await callback.message.edit_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=admin_panel_keyboard())
    await callback.answer()

@dp.message(F.text == "üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –≥—Ä—É–ø–ø—É")
async def register(message: types.Message, state: FSMContext):
    if not db.has_contact(message.from_user.id):
        await message.answer("üö´ –í—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç. –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç.")
        return
    await message.answer("üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", reply_markup=course_keyboard())
    await state.set_state(Form.waiting_for_group_selection)

@dp.message(F.text == "üîÑ –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É")
async def change_group(message: types.Message, state: FSMContext):
    if not db.has_contact(message.from_user.id):
        await message.answer("üö´ –í—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç. –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç.")
        return
    telegram_profile = f"@{message.from_user.username}" if message.from_user.username else None
    group_info = db.get_student_group(telegram_profile)
    if not group_info:
        await message.answer("üö´ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –≥—Ä—É–ø–ø—É' –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", reply_markup=main_menu_keyboard(registered=False))
        return
    db.delete_student_by_telegram(telegram_profile)
    await message.answer("‚úÖ –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É:", reply_markup=course_keyboard())
    await state.set_state(Form.waiting_for_group_selection)

@dp.message(Form.waiting_for_group_selection)
async def process_course_selection(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        telegram_profile = f"@{message.from_user.username}" if message.from_user.username else None
        keyboard = main_menu_keyboard(registered=bool(db.get_student_group(telegram_profile)))
        await message.answer("üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard)
        return
    if message.text == "üîô –ù–∞–∑–∞–¥":
        telegram_profile = f"@{message.from_user.username}" if message.from_user.username else None
        keyboard = main_menu_keyboard(registered=bool(db.get_student_group(telegram_profile)))
        await message.answer("üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard)
        await state.clear()
        return
    try:
        course = int(message.text.split()[0])
    except (ValueError, IndexError):
        await message.answer("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∫—É—Ä—Å–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return
    groups = db.get_groups_by_course(course)
    if not groups:
        telegram_profile = f"@{message.from_user.username}" if message.from_user.username else None
        await message.answer(f"üö´ –ù–∞ –∫—É—Ä—Å–µ {course} –ø–æ–∫–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø.", reply_markup=main_menu_keyboard(registered=bool(db.get_student_group(telegram_profile))))
        await state.clear()
        return
    await state.update_data({"course": course})
    group_buttons = [[KeyboardButton(text=f"üìö –ì—Ä—É–ø–ø–∞ {group[1]}")] for group in groups]
    group_buttons.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥"), KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    group_keyboard = ReplyKeyboardMarkup(keyboard=group_buttons, resize_keyboard=True)
    await message.answer(f"üìö –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –Ω–∞ –∫—É—Ä—Å–µ {course}:", reply_markup=group_keyboard)
    await state.set_state(Form.waiting_for_group)

@dp.message(Form.waiting_for_group)
async def process_group_selection(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        telegram_profile = f"@{message.from_user.username}" if message.from_user.username else None
        keyboard = main_menu_keyboard(registered=bool(db.get_student_group(telegram_profile)))
        await message.answer("üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard)
        return
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await message.answer("üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", reply_markup=course_keyboard())
        await state.set_state(Form.waiting_for_group_selection)
        return
    if not message.text.startswith("üìö –ì—Ä—É–ø–ø–∞ "):
        await message.answer("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã. –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return
    selected_group = message.text.replace("üìö –ì—Ä—É–ø–ø–∞ ", "").strip()
    data = await state.get_data()
    course = data.get("course")
    groups = db.get_groups_by_course(course)
    group_id = next((group[0] for group in groups if group[1] == selected_group), None)
    if group_id is None:
        await message.answer("üö´ –ù–µ–≤–µ—Ä–Ω–∞—è –≥—Ä—É–ø–ø–∞. –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return
    await state.update_data({"group_id": group_id})
    await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥"), KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        resize_keyboard=True
    ))
    await state.set_state(Form.waiting_for_name)

@dp.message(Form.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        telegram_profile = f"@{message.from_user.username}" if message.from_user.username else None
        keyboard = main_menu_keyboard(registered=bool(db.get_student_group(telegram_profile)))
        await message.answer("üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard)
        return
    if message.text == "üîô –ù–∞–∑–∞–¥":
        data = await state.get_data()
        course = data.get("course")
        groups = db.get_groups_by_course(course)
        group_buttons = [[KeyboardButton(text=f"üìö –ì—Ä—É–ø–ø–∞ {group[1]}")] for group in groups]
        group_buttons.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥"), KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
        group_keyboard = ReplyKeyboardMarkup(keyboard=group_buttons, resize_keyboard=True)
        await message.answer(f"üìö –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –Ω–∞ –∫—É—Ä—Å–µ {course}:", reply_markup=group_keyboard)
        await state.set_state(Form.waiting_for_group)
        return
    name = message.text.strip()
    if not name:
        await message.answer("üö´ –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è:")
        return
    data = await state.get_data()
    group_id = data.get("group_id")
    telegram_profile = f"@{message.from_user.username}" if message.from_user.username else None
    phone_number = db.get_contact(message.from_user.id)
    if not phone_number:
        await message.answer("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç.")
        await state.clear()
        return
    if db.student_exists(name, telegram_profile):
        telegram_profile = f"@{message.from_user.username}" if message.from_user.username else None
        keyboard = main_menu_keyboard(registered=bool(db.get_student_group(telegram_profile)))
        await message.answer(f"üö´ –°—Ç—É–¥–µ–Ω—Ç —Å –∏–º–µ–Ω–µ–º '{name}' –∏–ª–∏ Telegram-–ø—Ä–æ—Ñ–∏–ª–µ–º '{telegram_profile}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=keyboard)
    else:
        db.add_student(name, telegram_profile, phone_number, group_id)
        await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –≥—Ä—É–ø–ø—É!", reply_markup=main_menu_keyboard(registered=True))
    await state.clear()

@dp.message(F.text == "üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—â–∏—Ö—Å—è")
async def view_students(message: types.Message, state: FSMContext):
    if not db.has_contact(message.from_user.id):
        await message.answer("üö´ –í—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç. –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç.")
        return
    await message.answer("üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —É—á–∞—â–∏—Ö—Å—è:", reply_markup=course_keyboard())
    await state.set_state(ViewStudents.selecting_course)

@dp.message(ViewStudents.selecting_course)
async def process_course_selection_for_view(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        telegram_profile = f"@{message.from_user.username}" if message.from_user.username else None
        keyboard = main_menu_keyboard(registered=bool(db.get_student_group(telegram_profile)))
        await message.answer("üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard)
        return
    if message.text == "üîô –ù–∞–∑–∞–¥":
        telegram_profile = f"@{message.from_user.username}" if message.from_user.username else None
        keyboard = main_menu_keyboard(registered=bool(db.get_student_group(telegram_profile)))
        await message.answer("üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard)
        await state.clear()
        return
    try:
        course = int(message.text.split()[0])
    except (ValueError, IndexError):
        await message.answer("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∫—É—Ä—Å–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return
    groups = db.get_groups_by_course(course)
    if not groups:
        telegram_profile = f"@{message.from_user.username}" if message.from_user.username else None
        await message.answer(f"üö´ –ù–∞ –∫—É—Ä—Å–µ {course} –ø–æ–∫–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø.", reply_markup=main_menu_keyboard(registered=bool(db.get_student_group(telegram_profile))))
        await state.clear()
        return
    await state.update_data({"course": course})
    group_buttons = [[KeyboardButton(text=f"üìö –ì—Ä—É–ø–ø–∞ {group[1]}")] for group in groups]
    group_buttons.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥"), KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    group_keyboard = ReplyKeyboardMarkup(keyboard=group_buttons, resize_keyboard=True)
    await message.answer(f"üìö –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –Ω–∞ –∫—É—Ä—Å–µ {course}:", reply_markup=group_keyboard)
    await state.set_state(ViewStudents.selecting_group)

@dp.message(ViewStudents.selecting_group)
async def process_group_selection_for_view(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        telegram_profile = f"@{message.from_user.username}" if message.from_user.username else None
        keyboard = main_menu_keyboard(registered=bool(db.get_student_group(telegram_profile)))
        await message.answer("üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard)
        return
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await message.answer("üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —É—á–∞—â–∏—Ö—Å—è:", reply_markup=course_keyboard())
        await state.set_state(ViewStudents.selecting_course)
        return
    if not message.text.startswith("üìö –ì—Ä—É–ø–ø–∞ "):
        await message.answer("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã. –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return
    selected_group = message.text.replace("üìö –ì—Ä—É–ø–ø–∞ ", "").strip()
    data = await state.get_data()
    course = data.get("course")
    groups = db.get_groups_by_course(course)
    group_id = next((group[0] for group in groups if group[1] == selected_group), None)
    if group_id is None:
        await message.answer("üö´ –ù–µ–≤–µ—Ä–Ω–∞—è –≥—Ä—É–ø–ø–∞. –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return
    students = db.get_students_by_group(group_id)
    if not students:
        telegram_profile = f"@{message.from_user.username}" if message.from_user.username else None
        await message.answer(f"üì≠ –í –≥—Ä—É–ø–ø–µ '{selected_group}' –Ω–µ—Ç —É—á–∞—â–∏—Ö—Å—è.", reply_markup=main_menu_keyboard(registered=bool(db.get_student_group(telegram_profile))))
        await state.clear()
        return
    response = f"üìã –°–ø–∏—Å–æ–∫ —É—á–∞—â–∏—Ö—Å—è –≤ –≥—Ä—É–ø–ø–µ '{selected_group}' (–ö—É—Ä—Å {course}):\n\n"
    for student in students:
        response += (
            f"üë§ –ò–º—è: {student[1]}\n"
            f"üì± Telegram: {student[2]}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {student[3]}\n\n"
        )
    telegram_profile = f"@{message.from_user.username}" if message.from_user.username else None
    await message.answer(response, reply_markup=main_menu_keyboard(registered=bool(db.get_student_group(telegram_profile))))
    await state.clear()

@dp.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def delete_profile(message: types.Message):
    if not db.has_contact(message.from_user.id):
        await message.answer("üö´ –í—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç. –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç.")
        return
    telegram_profile = f"@{message.from_user.username}" if message.from_user.username else None
    db.delete_student_by_telegram(telegram_profile)
    await message.answer("‚úÖ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", reply_markup=main_menu_keyboard(registered=False))

@dp.message(F.text == "üí∏ –î–æ–Ω–∞—Ç")
async def donate(message: types.Message):
    if not db.has_contact(message.from_user.id):
        await message.answer("üö´ –í—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç. –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç.")
        return
    donate_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí∏ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", url="https://yoomoney.ru/to/4100118763269949")]
        ]
    )
    telegram_profile = f"@{message.from_user.username}" if message.from_user.username else None
    await message.answer("üíñ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–æ–µ–∫—Ç–∞!", reply_markup=donate_button)

@dp.message()
async def handle_unknown_message(message: types.Message):
    telegram_profile = f"@{message.from_user.username}" if message.from_user.username else None
    keyboard = main_menu_keyboard(registered=bool(db.get_student_group(telegram_profile)))
    await message.answer(
        "üö´ –í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )

if __name__ == '__main__':
    dp.run_polling(bot)
